from flask import Flask, render_template, request, jsonify, session, redirect, url_for, flash
from flask_mail import Mail, Message
import google.generativeai as genai
from itsdangerous import URLSafeTimedSerializer, SignatureExpired
import json
import re
from pymongo import MongoClient
from werkzeug.security import generate_password_hash, check_password_hash
import os
from dotenv import load_dotenv
from PIL import Image, ExifTags
import uuid
import glob
import requests
import random

load_dotenv()



app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'your-secret-key')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô secret key ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')
# ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Flask-Mail
app.config['MAIL_SERVER'] = 'smtp.gmail.com'  # ‡πÉ‡∏ä‡πâ SMTP ‡∏Ç‡∏≠‡∏á Gmail
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')  # ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')  # App Password ‡∏à‡∏≤‡∏Å Gmail
mail = Mail(app)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URLSafeTimedSerializer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô
s = URLSafeTimedSerializer(app.secret_key)

# ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û
app.config['UPLOAD_FOLDER'] = os.path.join(os.getcwd(), 'static/images')  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û
if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ


MONGO_URI = os.getenv('MONGO_URI')
gemini_api = os.getenv('GEMINI_API')
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB Atlas
client = MongoClient(MONGO_URI)
db = client.get_database('user_appdev')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô <dbname> ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
users_collection = db.users  # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ collection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini
genai.configure(api_key=gemini_api)

PEXELS_API_KEY = os.getenv('PIXEL_API')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
PEXELS_BASE_URL = "https://api.pexels.com/v1/search"


places_list = [
    "Bangkok", "Samut Prakan", "Nonthaburi", "Pathum Thani", "Phra Nakhon Si Ayutthaya", "Ang Thong", "Lopburi", "Sing Buri", "Chai Nat", "Saraburi",
    "Nakhon Nayok", "Prachin Buri", "Sa Kaeo", "Chonburi", "Rayong", "Chanthaburi", "Trat", "Chachoengsao",
    "Ratchaburi", "Kanchanaburi", "Suphan Buri", "Nakhon Pathom", "Samut Sakhon", "Samut Songkhram", "Phetchaburi", "Prachuap Khiri Khan",
    "Chumphon", "Ranong", "Surat Thani", "Phang Nga", "Phuket", "Krabi", "Nakhon Si Thammarat", "Trang", "Phatthalung", "Satun", "Songkhla", "Pattani", "Yala", "Narathiwat",
    "Chiang Mai", "Lamphun", "Lampang", "Uttaradit", "Phrae", "Nan", "Phayao", "Chiang Rai", "Mae Hong Son",
    "Nakhon Sawan", "Uthai Thani", "Kamphaeng Phet", "Tak", "Sukhothai", "Phitsanulok", "Phichit", "Phetchabun",
    "Maha Sarakham", "Roi Et", "Kalasin", "Mukdahan", "Yasothon", "Amnat Charoen", "Nong Khai", "Bueng Kan", "Nong Bua Lamphu", "Udon Thani", "Sakon Nakhon", "Nakhon Phanom",
    "Khon Kaen", "Chaiyaphum", "Nakhon Ratchasima", "Buri Ram", "Surin", "Si Sa Ket", "Ubon Ratchathani"
]

def get_trip_image(keyword):
    headers = {"Authorization": PEXELS_API_KEY}
    params = {
        "query": keyword,
        "per_page": 1
    }
    try:
        response = requests.get(PEXELS_BASE_URL, headers=headers, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        if "photos" in data and len(data["photos"]) > 0:
            # ‡∏î‡∏∂‡∏á URL ‡∏à‡∏≤‡∏Å "medium" size
            return data["photos"][0]["src"]["large"]
        else:
            print(f"No photos found for '{keyword}'")
    except requests.exceptions.RequestException as e:
        print(f"Error fetching image from Pexels for {keyword}: {e}")
    
    # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ default image ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    return url_for('static', filename='images/default_trip.jpg')



# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
def send_reset_email(email, token):
    reset_link = url_for('reset_password', token=token, _external=True)
    msg = Message('Reset Your Password', sender=app.config['MAIL_USERNAME'], recipients=[email])
    msg.body = f'‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {reset_link}\n‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ'
    mail.send(msg)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
def allowed_file(filename):
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
def resize_image(file, email, target_size=(512, 512)):
    img = Image.open(file)
    # üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏∏‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ EXIF
    try:
        for orientation in ExifTags.TAGS.keys():
            if ExifTags.TAGS[orientation] == "Orientation":
                break
        exif = img._getexif()

        if exif is not None and orientation in exif:
            if exif[orientation] == 3:
                img = img.rotate(180, expand=True)
            elif exif[orientation] == 6:
                img = img.rotate(270, expand=True)  # ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ 90 ‡∏≠‡∏á‡∏®‡∏≤
            elif exif[orientation] == 8:
                img = img.rotate(90, expand=True)   # ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ 90 ‡∏≠‡∏á‡∏®‡∏≤
    except (AttributeError, KeyError, IndexError):
        pass  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ EXIF ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ

    img = img.convert('RGB')
    img.thumbnail(target_size, Image.Resampling.LANCZOS)

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user_folder = os.path.join(app.config['UPLOAD_FOLDER'], email)
    if not os.path.exists(user_folder):
        os.makedirs(user_folder)

    existing_images = sorted(glob.glob(os.path.join(user_folder, "*.jpg")), key=os.path.getatime)
    if len(existing_images) >= 2:
        os.remove(existing_images[0])

    unique_filename = f"{uuid.uuid4().hex}.jpg"
    resized_path = os.path.join(user_folder, unique_filename)
    
    img.save(resized_path, optimize=True, quality=95)

    return f"{email}/{unique_filename}"

# ‡∏õ‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô generate_trips ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ location
def generate_trips(province, date_range, num_people, location=None):
    model = genai.GenerativeModel('gemini-2.0-flash')
    prompt = f"""‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏£‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á 3 ‡∏ó‡∏£‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {province} ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_range} ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô {num_people} ‡∏Ñ‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÉ‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ"""
    
    if location:
        prompt += f" ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö {location}"

    prompt += """
    ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏±‡πâ‡∏ô‡πÜ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ
    ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏ä‡πà‡∏ô ``` ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ô‡∏≠‡∏Å JSON:
    {
        "trips": [
            {
                "title": "‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏õ",
                "activities": [
                    {"time": "08:00", "activity": "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà 1", "location": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1"},
                    {"time": "10:00", "activity": "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà 2", "location": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2"}
                ]
            }
        ]
    }
    """
    print(prompt)
    response = model.generate_content(prompt)
    raw_response = response.text.strip()
    print("Raw Response:", raw_response)  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ API Response
    # ‚úÖ ‡πÉ‡∏ä‡πâ Regular Expression ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö {{ }} ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    cleaned_response = re.sub(r'```json|```', '', raw_response)  # ‡∏•‡∏ö Markdown syntax
    cleaned_response = re.sub(r'{{\s*', '{', cleaned_response)   # ‡∏•‡∏ö {{
    cleaned_response = re.sub(r'\s*}}', '}', cleaned_response)   # ‡∏•‡∏ö }}
    cleaned_response = cleaned_response.strip()  # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô
    print("cleaned_response:", cleaned_response)  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ API Response

    try:
        trips_data = json.loads(cleaned_response)  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß
        if "trips" not in trips_data:
            raise ValueError("Invalid JSON format: 'trips' key not found")  # ‡∏ñ‡πâ‡∏≤ JSON ‡πÑ‡∏°‡πà‡∏°‡∏µ "trips" ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á "activities" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        for trip in trips_data.get("trips", []):
            trip["activities"] = [
                f"{act['time']} - {act['activity']} ({act['location']})"
                for act in trip.get("activities", [])
            ]

    except (json.JSONDecodeError, ValueError) as e:
        print("‚ùå JSON Decode Failed:", e)  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        trips_data = {"trips": []}


    return trips_data["trips"]


def generate_trips_random(province, date_range, num_people, location=None):
    model = genai.GenerativeModel('gemini-2.0-flash')
    prompt = f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏£‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á 3 ‡∏ó‡∏£‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {province} ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_range} ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô {num_people} ‡∏Ñ‡∏ô"
    
    if location:
        prompt += f" ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö {location}"

    prompt += """
    ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏±‡πâ‡∏ô‡πÜ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤2‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡∏¢‡πâ‡∏≥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ
    ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏ä‡πà‡∏ô ``` ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ô‡∏≠‡∏Å JSON:
    {
        "trips": [
            {
                "title": "‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏õ",
                "activities": [
                    {"time": "08:00", "activity": "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà 1", "location": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1"},
                    {"time": "10:00", "activity": "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà 2", "location": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2"}
                ]
            }
        ]
    }
    """

    response = model.generate_content(prompt)
    raw_response = response.text.strip()
    print("Raw Response:", raw_response)  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ API Response
    # ‚úÖ ‡πÉ‡∏ä‡πâ Regular Expression ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö {{ }} ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    cleaned_response = re.sub(r'```json|```', '', raw_response)  # ‡∏•‡∏ö Markdown syntax
    cleaned_response = re.sub(r'{{\s*', '{', cleaned_response)   # ‡∏•‡∏ö {{
    cleaned_response = re.sub(r'\s*}}', '}', cleaned_response)   # ‡∏•‡∏ö }}
    cleaned_response = cleaned_response.strip()  # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô
    print("cleaned_response:", cleaned_response)  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ API Response

    try:
        trips_data = json.loads(cleaned_response)  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß
        if "trips" not in trips_data:
            raise ValueError("Invalid JSON format: 'trips' key not found")  # ‡∏ñ‡πâ‡∏≤ JSON ‡πÑ‡∏°‡πà‡∏°‡∏µ "trips" ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á "activities" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        for trip in trips_data.get("trips", []):
            trip["activities"] = [
                f"{act['time']} - {act['activity']} ({act['location']})"
                for act in trip.get("activities", [])
            ]

    except (json.JSONDecodeError, ValueError) as e:
        print("‚ùå JSON Decode Failed:", e)  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        trips_data = {"trips": []}


    return trips_data["trips"]

@app.route('/')
def index():
    if 'user' in session:
        # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå index.html ‡∏ó‡∏µ‡πà‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î base.html ‡∏≠‡∏¢‡∏π‡πà
        return render_template('index.html', user=session['user'])
    return redirect(url_for('login_page'))


@app.route('/register', methods=['GET', 'POST'])
def register_page():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        
        if not email or not password or not confirm_password:
            return render_template('login.html', message="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        
        if password != confirm_password:
            return render_template('login.html', message="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
        
        if users_collection.find_one({'email': email}):
            return render_template('login.html', message="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        
        hashed_password = generate_password_hash(password)
        users_collection.insert_one({'email': email, 'password': hashed_password})
        
        return redirect(url_for('login_page'))
    
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠ method ‡πÄ‡∏õ‡πá‡∏ô GET ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å login.html ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ó‡∏±‡πâ‡∏á Login ‡πÅ‡∏•‡∏∞ Register ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    return render_template('login.html')


@app.route('/login', methods=['GET', 'POST'])
def login_page():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        
        if not email or not password:
            return render_template('login.html', message="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Email ‡πÅ‡∏•‡∏∞ Password")
        
        user = users_collection.find_one({'email': email})
        if user and check_password_hash(user['password'], password):
            session['user'] = email
            return redirect(url_for('index'))
        else:
            return render_template('login.html', message="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠ method ‡πÄ‡∏õ‡πá‡∏ô GET ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ login
    return render_template('login.html')
    
# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Forgot Password
@app.route('/forgot_password', methods=['GET', 'POST'])
def forgot_password():
    if request.method == 'POST':
        email = request.form.get('email')
        user = users_collection.find_one({'email': email})
        
        if user:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 30 ‡∏ô‡∏≤‡∏ó‡∏µ (1800 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
            token = s.dumps(email, salt='password-reset-salt')
            flash('‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß')
            send_reset_email(email, token)
            return redirect(url_for('login_page'))
        else:
            flash('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')
            return redirect(url_for('forgot_password'))
    
    return render_template('forgot_password.html')

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Reset Password
@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ)
        email = s.loads(token, salt='password-reset-salt', max_age=1800)
    except SignatureExpired:
        flash('‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß')
        return redirect(url_for('forgot_password'))
    
    if request.method == 'POST':
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        
        if password != confirm_password:
            flash('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô')
            return redirect(url_for('reset_password', token=token))
        
        hashed_password = generate_password_hash(password)
        users_collection.update_one({'email': email}, {'$set': {'password': hashed_password}})
        flash('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
        return redirect(url_for('login_page'))
    
    return render_template('reset_password.html', token=token)

@app.route('/logout')
def logout():
    session.pop('user', None)
    return redirect(url_for('login_page'))
    
@app.route('/delete_account', methods=['POST'])
def delete_account():
    if 'user' not in session:
        return jsonify({'error': 'Please log in first'}), 401
    
    email = session['user']
    user = users_collection.find_one({'email': email})
    
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    if users_collection.delete_one({'email': email}):
        session.pop('user', None)
        return jsonify({'success': True})
    else:
        return jsonify({'error': 'Failed to delete account'}), 500
    
# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
@app.route('/upload_profile_image', methods=['POST'])
def upload_profile_image():
    if 'user' not in session:
        return jsonify({'error': 'Please log in first'}), 401

    email = session['user']
    user = users_collection.find_one({'email': email})

    if not user:
        return jsonify({'error': 'User not found'}), 404

    if 'profile_image' not in request.files:
        return jsonify({'error': 'No file part'}), 400

    file = request.files['profile_image']
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400

    if file and allowed_file(file.filename):
        try:
            # üìå ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ resize_image ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏£‡∏π‡∏õ
            filename = resize_image(file, email)
            image_url = url_for('static', filename=f'images/{filename}')
            
            # üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
            users_collection.update_one({'email': email}, {'$set': {'profile_image': image_url}})

            return jsonify({'message': 'Profile image uploaded successfully', 'image_url': image_url})
        except Exception as e:
            return jsonify({'error': f'Error processing image: {str(e)}'}), 500

    return jsonify({'error': 'Invalid file type'}), 400

# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
@app.route('/profile')
def profile():
    if 'user' not in session:
        return redirect(url_for('login_page'))
    
    email = session['user']
    user = users_collection.find_one({'email': email})
    
    if not user:
        flash('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
        return redirect(url_for('login_page'))
    
    return render_template('profile.html', user=user)

# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
@app.route('/update_profile', methods=['POST'])
def update_profile():
    if 'user' not in session:
        return jsonify({'error': 'Please log in first'}), 401
    
    email = session['user']
    user = users_collection.find_one({'email': email})
    
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    name = request.form.get('name')
    new_email = request.form.get('email')
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    if new_email and new_email != email:
        if users_collection.find_one({'email': new_email}):
            return jsonify({'error': 'Email already in use'}), 400
    
    update_data = {}
    if name:
        update_data['name'] = name
    if new_email:
        update_data['email'] = new_email
        session['user'] = new_email  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session ‡∏ñ‡πâ‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB
    if update_data or 'profile_image' in request.files:
        if 'profile_image' in request.files:
            file = request.files['profile_image']
            if file.filename != '':
                if file and allowed_file(file.filename):
                    try:
                        filename = resize_image(file, email)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                        image_url = url_for('static', filename=f'images/{filename}')
                        update_data['profile_image'] = image_url
                    except Exception as e:
                        return jsonify({'error': f'Error processing image: {str(e)}'}), 500
        
        users_collection.update_one({'email': email}, {'$set': update_data})
        flash('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
    
    return redirect(url_for('profile'))

@app.route('/get_trips', methods=['POST'])
def get_trips():
    province = request.form['province']
    date_range = request.form['date']  # ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
    num_people = request.form['num_people']  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô
    location = request.form.get('location', '')  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)

    # ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ó‡∏£‡∏¥‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    trips = generate_trips(province, date_range, num_people, location)
    for t in trips:
        t['province'] = province
    print("Final JSON Response:", jsonify(trips=trips).get_json())  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    session['generated_trips'] = trips
    session['province'] = province
    return jsonify(trips=trips)



# _____________________Weather_____________________

@app.route('/weather')
def weather_page():
    return render_template('weather.html', weather_api_key=WEATHER_API_KEY)

@app.route('/location/<trip_title>')
def location(trip_title):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ MyTrips ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if request.args.get('saved') == 'true':
        if 'user' not in session:
            flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô')
            return redirect(url_for('login_page'))
        
        email = session['user']
        user = users_collection.find_one({'email': email})
        saved_trips = user.get('saved_trips', []) if user else []
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏£‡∏¥‡∏õ‡∏à‡∏≤‡∏Å saved_trips
        selected_trip = next((t for t in saved_trips if t['title'] == trip_title), None)
    else:
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏£‡∏¥‡∏õ‡∏à‡∏≤‡∏Å session (‡∏ó‡∏£‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á)
        trips = session.get('generated_trips', [])
        selected_trip = next((t for t in trips if t['title'] == trip_title), None)

    if not selected_trip:
        flash('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏¥‡∏õ')
        return redirect(url_for('index'))
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    province = selected_trip.get('province', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î')
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if 'image' not in selected_trip:
        selected_trip['image'] = get_trip_image(selected_trip['title'])
    
    return render_template('location.html', trip=selected_trip, province=province)

@app.route('/trip')
def trip():
    trips = session.get('generated_trips', [])
    province = session.get('province', '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î')
    for trip in trips:
        trip.setdefault('province', province)
        #trip['image'] = get_trip_image(trip['title']) or url_for('static', filename='images/default_trip.jpg')
    return render_template('trip.html', trips = trips, province=province)

@app.route('/save_trip', methods=['POST'])
def save_trip():
    if 'user' not in session:
        return jsonify({'error': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô'}), 401
    
    email = session['user']
    trip_data = request.get_json()

    if not trip_data or 'title' not in trip_data or 'province' not in trip_data:
        return jsonify({'error': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'}), 400

    user = users_collection.find_one({'email': email})
    saved_trips = user.get('saved_trips', [])

    if len(saved_trips) >= 5:
        return jsonify({'error': '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏£‡∏¥‡∏õ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ó‡∏£‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏ö‡∏ó‡∏£‡∏¥‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô'}), 400
    
    if any(trip['title'] == trip_data['title'] for trip in saved_trips):
        return jsonify({'error': '‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß'}), 400
    
    users_collection.update_one(
        {'email': email},
        {'$push': {'saved_trips': trip_data}},
        upsert=True
    )

    return jsonify({'success': True})

@app.route('/mytrips')
def mytrips():
    if 'user' not in session:
        return redirect(url_for('login_page'))
    
    email = session['user']
    user = users_collection.find_one({'email': email})
    saved_trips = user.get('saved_trips', []) if user else []

    return render_template('mytrip.html', trips=saved_trips)

@app.route('/delete_trip', methods=['POST'])
def delete_trip():
    if 'user' not in session:
        return jsonify({'error': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô'}), 401
    
    email = session['user']
    trip_title = request.json.get('title')

    users_collection.update_one(
        {'email': email},
        {'$pull': {'saved_trips': {'title': trip_title}}}
    )

    return jsonify({'success': True})

@app.route('/get_trip_image')
def get_trip_image_endpoint():
    title = request.args.get('title', '')
    image_url = get_trip_image(title)
    return image_url

@app.route('/random_place')
def random_place():
    random_province = random.choice(places_list)  # ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    trips = generate_trips_random(random_province, None, num_people=1)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏£‡∏¥‡∏õ

    if trips and len(trips) > 0:
        trip = trips[0]  # ‡πÄ‡∏≠‡∏≤‡∏ó‡∏£‡∏¥‡∏õ‡πÅ‡∏£‡∏Å‡∏°‡∏≤‡πÉ‡∏ä‡πâ
        trip_title = trip.get("title", "‡∏ó‡∏£‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠")  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        trip_image = get_trip_image(trip_title)  # ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        trip["image"] = trip_image
        trip["province"] = random_province  # ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÑ‡∏ß‡πâ
        session['random_trip'] = trip  # ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á session

        return jsonify({
            "title": trip_title,   # ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏õ‡πÑ‡∏õ
            "province": random_province,  # ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
            "image": trip_image   # ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        })
    
    return jsonify({"error": "No trips available"}), 500

@app.route('/location/random_trip')
def location_random_trip():
    trip = session.get('random_trip')

    if not trip:
        flash('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà')
        return redirect(url_for('index'))

    return render_template('location.html', trip=trip, province=trip.get('province', ''))



if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True)